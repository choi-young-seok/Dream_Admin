apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'war'
 
sourceCompatibility = 1.8
targetCompatibility = 1.8
 
version = '1.0'
 
//버전 관리
def version = [
    spring: '4.3.4.RELEASE',
    servletAPI: '3.1.0',
    commonsCollections: '3.2.1',
    junit: '4.12',
    slf4j: '1.7.12'
]
 
//프로젝트를 빌드하고 나면 프로젝트 정보도 같이 지워지는데, Gradle 프로젝트임을 인식 시켜준다
//프로젝트 우클릭시 [run as] - [gradle build]가 표시되도록 해준다
eclipse {
    project.natures "org.springsource.ide.eclipse.gradle.core.nature"
    wtp {
        facet {
            facet name: 'jst.web', version: '3.1' // Servlet Spec version 지정
            facet name: 'jst.java', version: '1.8' //Java version 지정
        }
    }
}
 
//jar 파일에 대해서 설정한다
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
    //manifest : MANIFEST.MF 파일에 들어갈 속성=값 정보를 설정한다. 이 파일은 jar 파일 안에 META-INF에 들어간다.
    
}
 
//의존 라이브러리를 가져올 저장소 설정
repositories {
    mavenCentral()
    //mavenCentral() : Maven 중앙 서버를 저장소로 지정한다. 서버의 기본 URL은 http://repo1.maven.org/maven2/이다.
}
 
//의존성 라이브러리 주입
//여기에 의존성 추가해준 라이브러리들이 자동으로 빌드된다.
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'

    compile "org.springframework:spring-core:${version.spring}",
            "org.springframework:spring-web:${version.spring}",
            "org.springframework:spring-webmvc:${version.spring}",
            "org.springframework:spring-beans:${version.spring}",
            "org.springframework:spring-jdbc:${version.spring}",
            "org.springframework:spring-expression:${version.spring}",
            "org.springframework:spring-context-support:${version.spring}",
            "org.springframework:spring-aop:${version.spring}",
            "mysql:mysql-connector-java:5.1.39",
            "org.mybatis:mybatis-spring:1.3.1",
            "org.mybatis:mybatis:3.4.1"

    compile "org.aspectj:aspectjrt:${version.aspectj}",
            "org.aspectj:aspectjtools:${version.aspectj}",
            "org.aspectj:aspectjweaver:${version.aspectj}"

    compile("org.springframework:spring-context:${version.spring}") {
        exclude group: 'commons-logging',
                module: 'commons-logging'
    }

    testCompile "org.springframework:spring-test:${version.spring}"
    testCompile "junit:junit:${version.junit}"

    compile "org.slf4j:slf4j-api:${version.slf4j}"
    runtime "org.slf4j:jcl-over-slf4j:${version.slf4j}",
            "org.slf4j:slf4j-log4j12:${version.slf4j}"
    runtime("log4j:log4j:1.2.17") {
        exclude group: 'javax.mail', module: 'mail'
        exclude group: 'javax.jms', module: 'jms'
        exclude group: 'com.sun.jdmk', module: 'jmxtools'
        exclude group: 'com.sun.jmx', module: 'jmxri'
    }

    providedCompile "javax.servlet:javax.servlet-api:3.0.1",
            "javax.servlet.jsp:jsp-api:2.2"

    runtime "javax.servlet:jstl:1.1.2"

    compile "org.projectlombok:lombok:1.16.16"

    compile "com.fasterxml.jackson.core:jackson-core:${version.jackson}",
            "com.fasterxml.jackson.core:jackson-databind:${version.jackson}"
}
 
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8' //인코딩을 UTF-8로 통일 
 
//test 정보를 설정한다
test {
    systemProperties 'property': 'value'
}
 
//아카이브파일(.jar) 배포를 설정한다
uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}